# -*- coding: utf-8 -*-
"""Password generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DPW49nzvTZIkfzXX2XMmp1M_bygVXHZm
"""

import random
import string
import hashlib
import time
from datetime import datetime

# Database to store passwords & hints (for demo purposes only; not secure in real-life use)
user_passwords = {}
user_hints = {}

# 1. Password Strength Meter
def password_strength(password):
    length = len(password)
    categories = sum([
        any(c.islower() for c in password),
        any(c.isupper() for c in password),
        any(c.isdigit() for c in password),
        any(c in string.punctuation for c in password)
    ])

    if length >= 12 and categories == 4:
        return "Strong"
    elif length >= 8 and categories >= 3:
        return "Medium"
    else:
        return "Weak"

# 2. Customizable Character Options
def customizable_password(length=12):
    print("\n🔧 Customize your password:")
    use_upper = input("Include uppercase letters? (y/n): ").strip().lower() == 'y'
    use_lower = input("Include lowercase letters? (y/n): ").strip().lower() == 'y'
    use_digits = input("Include digits? (y/n): ").strip().lower() == 'y'
    use_symbols = input("Include special characters? (y/n): ").strip().lower() == 'y'

    char_set = ''

    if use_upper:
        char_set += string.ascii_uppercase
    if use_lower:
        char_set += string.ascii_lowercase
    if use_digits:
        char_set += string.digits
    if use_symbols:
        char_set += string.punctuation

    if not char_set:
        print("⚠ No character set selected. Defaulting to lowercase letters.")
        char_set = string.ascii_lowercase

    password = ''.join(random.choice(char_set) for _ in range(length))

    return password

# 3. Suggest Unique Password for Each User
def generate_unique_password(username, length=12, strength_mode='strong'):
    seed = hashlib.sha256((username + str(time.time())).encode()).hexdigest()
    random.seed(seed)

    if strength_mode == 'memorable':
        # Use simple words for memorability
        words = ['apple', 'orange', 'banana', 'grape', 'kiwi', 'cherry', 'peach', 'melon']
        password = '-'.join(random.choice(words) for _ in range(3))
    else:
        password = customizable_password(length)

    return password

# 4. Strength vs. Memorability Option
def strength_vs_memorability(username):
    print("\n🔧 Choose password type:")
    print("1. Strong (More secure, harder to remember)")
    print("2. Memorable (Easier to remember, less secure)")

    choice = input("Enter 1 or 2: ")

    if choice == '1':
        password = generate_unique_password(username, length=16, strength_mode='strong')
    elif choice == '2':
        password = generate_unique_password(username, strength_mode='memorable')
    else:
        print("❌ Invalid choice! Defaulting to strong password.")
        password = generate_unique_password(username, length=16, strength_mode='strong')

    return password, choice

# 5. Hint Provider in Case the User Forgets the Password
def provide_hint(username, password_type, password):
    print("\n💡 Let's create a hint to help you remember your password.")

    # Generate an automatic hint based on password type
    if password_type == '2':  # Memorable
        words_in_password = password.split('-')
        suggested_hint = f"It's about fruits: {', '.join(words_in_password)}"
    else:  # Strong
        date_created = datetime.now().strftime("%B %d, %Y")
        suggested_hint = f"Strong password created on {date_created}. 16 chars with symbols."

    print(f"👉 Suggested hint: {suggested_hint}")

    custom_hint = input("Would you like to edit the hint? (y/n): ").strip().lower()

    if custom_hint == 'y':
        user_hint = input("Enter your custom hint: ").strip()
        if user_hint:
            user_hints[username] = user_hint
        else:
            print("⚠ Empty input! Using the suggested hint instead.")
            user_hints[username] = suggested_hint
    else:
        print("✅ Using suggested hint.")
        user_hints[username] = suggested_hint

def retrieve_hint(username):
    hint = user_hints.get(username)
    if hint:
        print(f"💡 Your hint is: {hint}")
    else:
        print("❌ No hint found for this user.")

# Main Menu
def main():
    print("=== 🔐 Welcome to the Custom Password Generator 🔐 ===")
    username = input("Enter your username: ").strip()

    password, pwd_type = strength_vs_memorability(username)

    print("\n✅ Your password has been generated!")
    print(f"🔑 Password: {password}")

    strength = password_strength(password)
    print(f"💪 Password Strength: {strength}")

    provide_hint(username, pwd_type, password)

    # Store the password (hashed) and hint for retrieval (demo purposes)
    user_passwords[username] = hashlib.sha256(password.encode()).hexdigest()

    print("\n✅ Password securely stored (hashed). Don't forget it!")

    # Post-generation menu
    while True:
        print("\n--- MENU ---")
        print("1. Retrieve password hint")
        print("2. Generate new password")
        print("3. Exit")

        option = input("Select an option: ")

        if option == '1':
            retrieve_hint(username)
        elif option == '2':
            password, pwd_type = strength_vs_memorability(username)
            print(f"\n🔑 New Password: {password}")
            strength = password_strength(password)
            print(f"💪 Password Strength: {strength}")
            provide_hint(username, pwd_type, password)
            user_passwords[username] = hashlib.sha256(password.encode()).hexdigest()
        elif option == '3':
            print("👋 Exiting. Stay safe!")
            break
        else:
            print("❌ Invalid option. Try again.")

# Run the program
if __name__ == "__main__":
    main()



